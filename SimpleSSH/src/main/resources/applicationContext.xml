<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--default-autowire="byType"-->
    <!--c名称空间-->


    <!-- 启动@aspectj的自动代理支持-->
    <aop:aspectj-autoproxy />
    <!--注意 xmlns:context 的配置，和 xsi:schemaLocation 需要配置 context-->
    <context:component-scan base-package="com.noobyang" />


    <!-- C3P0 JDBC 配置 -->
    <!-- 导入外部的properties配置文件 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${mysql.driver}"/>
        <property name="jdbcUrl" value="${mysql.url}"/>
        <property name="user" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${mysql.initialPoolSize}"/>
        <!--连接池中保留的最小连接数。Default: 3 -->
        <property name="minPoolSize" value="3"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${mysql.maxPoolSize}"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="3"/>
        <!--最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="1800"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
<!--        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:hbm/*.hbm.xml</value>
            </list>
        </property>
    </bean>


    <!-- Write operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushM -->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--  -->
    <!-- 方法零，开启注解事务，为所有方法开启事务 -->
<!--    <tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!-- 方法一，开启注解事务，通过事务拦截器为 *ServiceImpl 类中特定方法开启事务 -->
<!--    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--        &lt;!&ndash; 配置事务属性 &ndash;&gt;-->
<!--        <property name="transactionAttributes">-->
<!--            <props>-->
<!--                <prop key="add*">PROPAGATION_REQUIRED</prop>-->
<!--                <prop key="save*">PROPAGATION_REQUIRED</prop>-->
<!--                <prop key="delete*">PROPAGATION_REQUIRED</prop>-->
<!--                <prop key="update*">PROPAGATION_REQUIRED</prop>-->
<!--                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->
<!--    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
<!--        <property name="beanNames">-->
<!--            <list>-->
<!--                <value>*ServiceImpl</value>-->
<!--            </list>-->
<!--        </property>-->
<!--        <property name="interceptorNames">-->
<!--            <list>-->
<!--                <value>transactionInterceptor</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- 方法二，开启注解事务，通过 pointcut 为 *ServiceImpl 类中特定方法开启事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="save*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="delete*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true" rollback-for="Throwable" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* com.noobyang..*ServiceImpl.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>


    <!-- 所有业务配置文件都要用到 sessionFactory，那么这个就是专门来创建 sessionFactory 的，其他的业务配置文件指定parent就有了该属性 -->
    <!-- 所有业务 dao 的 parent -->
    <bean id="testDao" class="com.noobyang.dao.AbsDao" abstract="true">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="testDaoImpl" class="com.noobyang.dao.impl.TestDaoImpl" parent="testDao">

    </bean>


</beans>