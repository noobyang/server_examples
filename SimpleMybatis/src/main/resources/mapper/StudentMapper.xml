<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性是名称空间，必须唯一 -->
<mapper namespace="StudentID">

    <!-- resultMap标签:映射实体与表
     type属性：表示实体全路径名
     id属性：为实体与表的映射取一个任意的唯一的名字
    -->
    <resultMap type="com.noobyang.entity.Student" id="studentMap">
        <!-- id标签:映射主键属性
             result标签：映射非主键属性
             property属性:实体的属性名
             column属性：表的字段名
        -->
        <id property="id" column="id_"/>
        <result property="name" column="name_"/>
        <result property="sal" column="sal_"/>
    </resultMap>

    <select id="findById" parameterType="int" resultMap="studentMap">
        select id id_, name name_, sal sal_ from student where id = #{id};
    </select>

    <insert id="add" parameterType="com.noobyang.entity.Student">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into student (id, name, sal) values (#{id},#{name},#{sal});
    </insert>

    <!--
    查询所有数据
    返回值类型讲道理是List<Student>的，但我们只要写集合中的类型就行了
    -->
    <select id="findAll" resultType="com.noobyang.entity.Student">
        select * from student;
    </select>

    <!--根据id删除-->
    <delete id="delete" parameterType="int">
        delete from student where id=#{id};
    </delete>

    <!--更新-->
    <update id="update" parameterType="com.noobyang.entity.Student">
        update student set name=#{name},sal=#{sal} where id=#{id};
    </update>

    <!--分页查询-->
    <select id="pagination" parameterType="map" resultType="com.noobyang.entity.Student">
        /*根据key自动找到对应Map集合的value*/
        select * from student limit #{start},#{end};
    </select>

    <!--动态 SQL-->
    <select id="findByCondition" resultMap="studentMap" parameterType="map">
        select * from student
        <where>
            <if test="name!=null">
                and name=#{name}
            </if>
            <if test="sal!=null">
                and sal &lt; #{sal}
            </if>
        </where>
    </select>

    <!--动态更新-->
    <!--不要忘了逗号-->
    <update id="updateByCondition" parameterType="map">
        update student
        <set>
            <if test="name!=null">
                name = #{name},
            </if>
            <if test="sal!=null">
                sal = #{sal},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteByCondition" parameterType="int">
        <!-- foreach用于迭代数组元素
             open表示开始符号
             close表示结束符合
             separator表示元素间的分隔符
             item表示迭代的数组，属性值可以任意，但提倡与方法的数组名相同
             #{ids}表示数组中的每个元素值
         -->
        delete from student where id in
        <foreach collection="array" open="(" close=")" separator="," item="ids">
            #{ids}
        </foreach>
    </delete>


    <!--SQL片段默认是不帮我们自动生成合适的SQL，因此需要我们自己手动除去逗号-->
    <sql id="key">
        <trim suffixOverrides=",">
            <if test="id!=null">
                id,
            </if>

            <if test="id!=null">
                name,
            </if>

            <if test="id!=null">
                sal,
            </if>
        </trim>
    </sql>

<!--    prefixOverrides:指定去除多余的前缀内容-->
<!--    suffixOverrides:指定去除多余的后缀内容，如：suffixOverrides=","，去除trim标签内sql语句多余的后缀","。-->
    <sql id="value">
        <trim suffixOverrides=",">
            <if test="id!=null">
                #{id},
            </if>

            <if test="id!=null">
                #{name},
            </if>

            <if test="id!=null">
                #{sal},
            </if>
        </trim>
    </sql>
    <!--动态插入-->
    <insert id="insertByCondition" parameterType="com.noobyang.entity.Student">
        insert into student (<include refid="key"/>) values
        (<include refid="value"/>)
    </insert>

</mapper>