<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--default-autowire="byType"-->
    <!--c名称空间-->


    <!-- 启动@aspectj的自动代理支持-->
    <aop:aspectj-autoproxy />
    <!--注意 xmlns:context 的配置，和 xsi:schemaLocation 需要配置 context-->
    <context:component-scan base-package="com.noobyang" />


    <!-- 定义aspect类 -->
    <bean class="com.noobyang.aop.AOP" />

    <!-- 定义目标对象 -->
    <bean id="user" class="com.noobyang.aop.User" />
    <!-- scope="singleton" lazy-init="true" init-method="" destroy-method="" -->
<!--    1) 对象创建： 单例/多例-->
<!--    scope="singleton", 默认值， 即 默认是单例 【service/dao/工具类】-->
<!--    scope="prototype", 多例；              【Action对象】-->

<!--    2) 什么时候创建?-->
<!--    scope="prototype"  在用到对象的时候，才创建对象。-->
<!--    scope="singleton"  在启动(容器初始化之前)， 就已经创建了bean，且整个应用只有一个。-->
<!--    3)是否延迟创建-->
<!--    lazy-init="false"  默认为false,  不延迟创建，即在启动时候就创建对象-->
<!--    lazy-init="true"   延迟初始化， 在用到对象的时候才创建对象-->
<!--    （只对单例有效）-->
<!--    4) 创建对象之后，初始化/销毁-->
<!--    init-method="init_user"       【对应对象的init_user方法，在对象创建之后执行 】-->
<!--    destroy-method="destroy_user"  【在调用容器对象的destroy方法时候执行，(容器用实现类)】-->


    <!-- 定义带参数目标对象 -->
    <bean id="userParams" class="com.noobyang.aop.UserParams">
        <!--通过constructor这个节点来指定构造函数的参数类型、名称、第几个-->
        <constructor-arg index="0" name="id" type="java.lang.String" value="1"/>
        <constructor-arg index="1" name="username" type="java.lang.String" value="noobyang"/>
    </bean>


    <!--首先创建工厂对象-->
    <bean id="factory" class="com.noobyang.factory.UserFactory"/>
    <!--指定工厂对象和工厂方法-->
    <bean id="userFactory" class="com.noobyang.factory.User" factory-bean="factory" factory-method="getBean"/>


    <!--创建userDao对象-->
    <bean id="userDao" class="com.noobyang.injection.UserDao"/>
    <!--创建userService对象-->
    <bean id="userService" class="com.noobyang.injection.UserService">
        <!--要想在userService层中能够引用到userDao，就必须先创建userDao对象-->
        <constructor-arg index="0" name="userDao" type="com.noobyang.injection.UserDao" ref="userDao"/>
    </bean>

<!--    &lt;!&ndash;创建userService对象&ndash;&gt;
    <bean id="userService" class="com.noobyang.injection.UserService">
        <property name="userDao" ref="userDao"/>
    </bean>

    &lt;!&ndash;
    1.创建userService，看到有userDao这个属性
    2.而userDao这个属性又是一个对象
    3.在property属性下又内置了一个bean
    4.创建userDao
    &ndash;&gt;
    <bean id="userService" class="com.noobyang.injection.UserService">
        <property name="userDao">
            <bean class="com.noobyang.injection.UserDao"/>
        </property>
    </bean>

    &lt;!&ndash;不用写property节点了，直接使用p名称空间&ndash;&gt;
    &lt;!&ndash;xmlns:p="http://www.springframework.org/schema/p"&ndash;&gt;
    <bean id="userService" class="com.noobyang.injection.UserService" p:userDao-ref="userDao"/>

    &lt;!&ndash;
        1.通过名字来自动装配
        2.发现userService中有个叫userDao的属性
        3.看看IOC容器UserDao类型的对象
        4.如果有，就装配进去
    &ndash;&gt;
    <bean id="userService" class="com.noobyang.injection.UserService" autowire="byType"/>-->


    <!--创建userDao对象-->
    <bean id="user2" class="com.noobyang.aop2.User2"/>
    <bean id="aop2" class="com.noobyang.aop2.AOP2"/>

    <bean id="proxy" class="com.noobyang.aop2.ProxyFactory" factory-method="getProxyInstance">
        <constructor-arg index="0" ref="user2"/>
        <constructor-arg index="1" ref="aop2"/>
    </bean>


    <!--对象实例-->
    <!--切面类-->
    <!--AOP配置-->
<!--    <aop:config >-->

<!--        &lt;!&ndash;定义切入表达式，拦截哪些方法&ndash;&gt;-->
<!--        <aop:pointcut id="pointCut" expression="execution(* com.noobyang.aop.*.*(..))"/>-->

<!--        &lt;!&ndash;指定切面类是哪个&ndash;&gt;-->
<!--        <aop:aspect ref="aop">-->

<!--            &lt;!&ndash;指定来拦截的时候执行切面类的哪些方法&ndash;&gt;-->
<!--            <aop:before method="begin" pointcut-ref="pointCut"/>-->
<!--            <aop:after method="close" pointcut-ref="pointCut"/>-->

<!--        </aop:aspect>-->
<!--    </aop:config>-->



    <!--JDBC-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql:///mydatabase?serverTimezone=GMT%2B8&amp;useSSL=false"/>
        <property name="user" value="liyang"/>
        <property name="password" value="liyang"/>
        <property name="initialPoolSize" value="3"/>
        <property name="maxPoolSize" value="10"/>
        <property name="maxStatements" value="100"/>
        <property name="acquireIncrement" value="2"/>
    </bean>

    <!-- 2. 创建JdbcTemplate对象 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="userDaoJDBC" class="com.noobyang.dao.UserDao3">
        <!--要想在userService层中能够引用到userDao，就必须先创建userDao对象-->
        <constructor-arg index="0" name="jdbcTemplate" type="org.springframework.jdbc.core.JdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <!--1.配置事务的管理器类:JDBC-->
    <bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--引用数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    &lt;!&ndash;2.配置如何管理事务&ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="txManage">-->
<!--        &lt;!&ndash;配置事务的属性&ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;所有的方法，并不是只读&ndash;&gt;-->
<!--            <tx:method name="*" read-only="false"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    &lt;!&ndash;3.配置拦截哪些方法+事务的属性&ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pt" expression="execution(* com.noobyang.dao.UserService3.*(..) )"/>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>-->
<!--    </aop:config>-->

    <!--开启以注解的方式实现事务控制-->
    <tx:annotation-driven transaction-manager="txManage"/>


</beans>