<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <!--c名称空间-->


    <!-- 启动@aspectj的自动代理支持-->
    <aop:aspectj-autoproxy />
    <!-- 定义aspect类 -->
    <bean class="com.noobyang.aop.AOP" />

    <!-- 定义目标对象 -->
    <bean id="userDao" class="com.noobyang.aop.UserDao" />
    <!-- scope="singleton" lazy-init="true" init-method="" destroy-method="" -->
<!--    1) 对象创建： 单例/多例-->
<!--    scope="singleton", 默认值， 即 默认是单例 【service/dao/工具类】-->
<!--    scope="prototype", 多例；              【Action对象】-->

<!--    2) 什么时候创建?-->
<!--    scope="prototype"  在用到对象的时候，才创建对象。-->
<!--    scope="singleton"  在启动(容器初始化之前)， 就已经创建了bean，且整个应用只有一个。-->
<!--    3)是否延迟创建-->
<!--    lazy-init="false"  默认为false,  不延迟创建，即在启动时候就创建对象-->
<!--    lazy-init="true"   延迟初始化， 在用到对象的时候才创建对象-->
<!--    （只对单例有效）-->
<!--    4) 创建对象之后，初始化/销毁-->
<!--    init-method="init_user"       【对应对象的init_user方法，在对象创建之后执行 】-->
<!--    destroy-method="destroy_user"  【在调用容器对象的destroy方法时候执行，(容器用实现类)】-->


    <!-- 定义带参数目标对象 -->
    <bean id="userParams" class="com.noobyang.aop.UserParams">
        <!--通过constructor这个节点来指定构造函数的参数类型、名称、第几个-->
        <constructor-arg index="0" name="id" type="java.lang.String" value="1"/>
        <constructor-arg index="1" name="username" type="java.lang.String" value="noobyang"/>
    </bean>

    <!--首先创建工厂对象-->
    <bean id="factory" class="com.noobyang.aop.UserFactory"/>
    <!--指定工厂对象和工厂方法-->
    <bean id="user" class="com.noobyang.aop.User" factory-bean="factory" factory-method="getBean"/>

</beans>